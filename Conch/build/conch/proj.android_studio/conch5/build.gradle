import proguard.gradle.ProGuardTask

apply plugin: 'com.android.library'

android {
    compileSdkVersion 30
    buildToolsVersion '29.0.2'

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 30
        versionCode 20
        versionName "release-2.12.0"
    }
    sourceSets.main{
        jniLibs.srcDir 'libs'
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    testImplementation 'junit:junit:4.12'
    //noinspection GradleCompatible
    api 'com.android.support:support-v4:28.0.0'
    implementation 'androidx.appcompat:appcompat:1.3.1'
}
android {
    lintOptions {
        abortOnError false
    }
}


def SDK_BASENAME = "conch5";
def SDK_VERSION = "_1.0";
def sdkDestinationPath = "outJar";
//def zipFile = file('build/intermediates/packaged-classes/release/classes.jar');
def zipFile = file('build/intermediates/aar_main_jar/release/classes.jar');
def fromJar=sdkDestinationPath +"/"+ SDK_BASENAME + SDK_VERSION + ".jar";
def toJar=sdkDestinationPath +"/"+ SDK_BASENAME + SDK_VERSION + "_min.jar";
task deleteBuild(type: Delete) {
    delete fromJar
}


task conchUglify(type: ProGuardTask, dependsOn: "build") {
// 未混淆的jar
    injars fromJar
// 混淆后的jar路径
    outjars toJar
// 具体需要keep住的类
    configuration 'proguard-rules.pro'
}


task conchMakeJar(type: Jar) {
    from zipTree(zipFile)
    //from fileTree(dir:'build/intermediates/classes/release',includes:['laya/**'])
    from fileTree(dir: 'src/main',includes: ['assets/**'])
    baseName = SDK_BASENAME + SDK_VERSION
    destinationDir = file(sdkDestinationPath)
}


conchMakeJar.dependsOn(deleteBuild, build)
